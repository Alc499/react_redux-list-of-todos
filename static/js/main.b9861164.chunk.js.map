{"version":3,"sources":["components/store.js","api/getData.js","components/User.js","components/TodoItem.js","components/TodoList.js","App.js","index.js"],"names":["getTodos","state","todos","getIsLoaded","isLoaded","getIsLoading","isLoading","store","createStore","action","type","_objectSpread","value","sortField","Object","toConsumableArray","reverse","sort","a","b","user","name","localeCompare","title","id","filter","todo","prepareData","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","concat","abrupt","fetch","then","response","json","stop","_x","apply","this","arguments","getTodosWithUsers","_ref2","_callee2","todosData","usersData","_context2","sent","map","getData_objectSpread","find","userId","User","currentUser","react_default","createElement","Fragment","className","email","phone","TodoItem","deleteTodo","components_User","completed","checked","onClick","connect","data-sort-type","data-column","components_TodoItem","key","dispatch","changeIsLoading","setTodos","sortByName","sortByTitle","sortById","components_TodoList","data","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b9861164.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst SET_TODOS = 'setTodos';\nconst SET_LOADING = 'setLoading';\nconst SORT_BY_NAME = 'name';\nconst SORT_BY_TITLE = 'title';\nconst SORT_BY_ID = 'id';\nconst DELETE_TODO = 'delete';\n\nexport const getTodos = state => state.todos;\nexport const getIsLoaded = state => state.isLoaded;\nexport const getIsLoading = state => state.isLoading;\n\nexport const changeIsLoading = () => ({ type: SET_LOADING });\nexport const setTodos = value => ({ type: SET_TODOS, value });\nexport const sortById = () => ({ type: SORT_BY_ID });\nexport const sortByName = () => ({ type: SORT_BY_NAME });\nexport const sortByTitle = () => ({ type: SORT_BY_TITLE });\nexport const deleteTodo = value => ({ type: DELETE_TODO, value });\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.value,\n        isLoaded: true,\n        isLoading: false,\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n\n    case SORT_BY_NAME:\n      return state.sortField === SORT_BY_NAME\n        ? {\n          ...state,\n          todos: [...state.todos].reverse(),\n        }\n        : {\n          ...state,\n          todos: [...state.todos]\n            .sort((a, b) => a.user.name.localeCompare(b.user.name)),\n          sortField: SORT_BY_NAME,\n        };\n\n    case SORT_BY_TITLE:\n      return state.sortField === SORT_BY_TITLE\n        ? {\n          ...state,\n          todos: [...state.todos].reverse(),\n        }\n        : {\n          ...state,\n          todos: [...state.todos]\n            .sort((a, b) => a.title.localeCompare(b.title)),\n          sortField: SORT_BY_TITLE,\n        };\n\n    case SORT_BY_ID:\n      return state.sortField === SORT_BY_ID\n        ? {\n          ...state,\n          todos: [...state.todos].reverse(),\n        }\n        : {\n          ...state,\n          todos: [...state.todos].sort((a, b) => a.id - b.id),\n          sortField: SORT_BY_ID,\n        };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.value),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  todos: [],\n  isLoaded: false,\n  isLoading: false,\n  sortField: 'id',\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","const prepareData = async(value) => {\n  const url = `https://jsonplaceholder.typicode.com/${value}`;\n\n  return fetch(url)\n    .then(response => response.json());\n};\n\nconst getTodosWithUsers = async() => {\n  const todosData = await prepareData('todos');\n  const usersData = await prepareData('users');\n\n  return todosData.map(todo => ({\n    ...todo,\n    user: usersData.find(user => user.id === todo.userId),\n  }));\n};\n\nexport default getTodosWithUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ currentUser }) => (\n  <>\n    <td className=\"todo-list-table__user-info\">{ currentUser.name }</td>\n    <td className=\"todo-list-table__user-info\">{ currentUser.email }</td>\n    <td className=\"todo-list-table__user-info\">{ currentUser.phone }</td>\n  </>\n);\n\nUser.propTypes = {\n  currentUser: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    phone: PropTypes.string,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport User from './User';\n\nconst TodoItem = ({ todo, deleteTodo }) => (\n  <tr>\n    <User currentUser={todo.user} />\n    <td className=\"todo-list-table__task\">\n      {todo.title}\n      {todo.completed\n        ? <input type=\"checkbox\" checked />\n        : <input type=\"checkbox\" /> }\n    </td>\n    <td className=\"delete-btn-td\">\n      <button\n        type=\"button\"\n        className=\"todo-list-table__detele-btn\"\n        onClick={() => deleteTodo(todo.id)}\n      >\n        Delete Todo\n      </button>\n    </td>\n  </tr>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    user: PropTypes.object,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport TodoItem from './TodoItem';\nimport { getTodos } from './store';\n\nconst TodoList = ({ todos, deleteTodo }) => (\n  <table className=\"todo-list-table\">\n    <thead>\n      <tr className=\"todo-list-table__titles\">\n        <th\n          data-sort-type=\"name\"\n          data-column=\"0\"\n          className=\"todo-list-table__title\"\n        >\n          User Name\n        </th>\n        <th\n          data-sort-type=\"name\"\n          data-column=\"1\"\n          className=\"todo-list-table__title\"\n        >\n          E-mail\n        </th>\n        <th\n          data-sort-type=\"name\"\n          data-column=\"2\"\n          className=\"todo-list-table__title\"\n        >\n          Phone\n        </th>\n        <th\n          data-sort-type=\"todos\"\n          data-column=\"3\"\n          className=\"todo-list-table__title\"\n        >\n          Tasks\n        </th>\n        <th\n          data-sort-type=\"todos\"\n          data-column=\"4\"\n          className=\"todo-list-table__title\"\n        />\n      </tr>\n    </thead>\n    <tbody className=\"todo-list-table__tasks\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n\nconst getData = state => ({\n  todos: getTodos(state),\n});\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default connect(getData)(TodoList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './App.css';\n\nimport {\n  getIsLoaded,\n  getIsLoading,\n  changeIsLoading,\n  setTodos,\n  sortByName,\n  sortByTitle,\n  sortById,\n  deleteTodo,\n} from './components/store';\nimport getTodosWithUsers from './api/getData';\n\nimport TodoList from './components/TodoList';\n\nconst App = ({\n  isLoaded,\n  isLoading,\n  setTodos,\n  changeIsLoading,\n  sortByName,\n  sortByTitle,\n  sortById,\n  deleteTodo,\n}) => {\n  const handleClick = () => {\n    changeIsLoading();\n\n    getTodosWithUsers().then((data) => {\n      setTodos(data);\n    });\n  };\n\n  const handleDelete = value => deleteTodo(value);\n\n  return (\n    <div className=\"App\">\n      { isLoaded ? (\n        <>\n          <h1 className=\"main-title\">Dynamic list of todos</h1>\n\n          <div className=\"sort-buttons\">\n            <h2>\n              Sort by:\n            </h2>\n            <button\n              type=\"button\"\n              onClick={sortById}\n              className=\"sort-buttons__btn\"\n            >\n              ID\n            </button>\n            <button\n              type=\"button\"\n              onClick={sortByTitle}\n              className=\"sort-buttons__btn\"\n            >\n              Task\n            </button>\n            <button\n              type=\"button\"\n              onClick={sortByName}\n              className=\"sort-buttons__btn\"\n            >\n              User\n            </button>\n          </div>\n\n          <TodoList\n            deleteTodo={handleDelete}\n          />\n        </>\n      ) : (\n        <button type=\"button\" onClick={handleClick} className=\"load-btn\">\n          {isLoading ? 'Loading...' : 'Load' }\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst getData = state => ({\n  isLoaded: getIsLoaded(state),\n  isLoading: getIsLoading(state),\n});\n\nconst getMethods = dispatch => ({\n  changeIsLoading: () => dispatch(changeIsLoading()),\n  setTodos: value => dispatch(setTodos(value)),\n  sortByName: () => dispatch(sortByName()),\n  sortByTitle: () => dispatch(sortByTitle()),\n  sortById: () => dispatch(sortById()),\n  deleteTodo: value => dispatch(deleteTodo(value)),\n});\n\nApp.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  setTodos: PropTypes.func.isRequired,\n  changeIsLoading: PropTypes.func.isRequired,\n  sortById: PropTypes.func.isRequired,\n  sortByName: PropTypes.func.isRequired,\n  sortByTitle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './components/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}